<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abstracts on Marcel</title>
    <link>https://marcelmue.github.io/abstracts/</link>
    <description>Recent content in Abstracts on Marcel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© MarcelMue</copyright>
    <lastBuildDate>Sat, 21 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://marcelmue.github.io/abstracts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How Security Evolves with your Kubernetes Footprint</title>
      <link>https://marcelmue.github.io/abstracts/giantswarm-webinar-2020/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marcelmue.github.io/abstracts/giantswarm-webinar-2020/</guid>
      <description>Single-cluster security in Kubernetes is a broadly covered topic with well-established best practices. Adopting Kubernetes usually starts with a limited proof of concept in a single team, but can rapidly lead to massive growth and decentralized adoption across an organization. As team practices diverge, this growth stage can introduce serious security challenges.
Working with the likes of adidas and Shutterstock, we’re in a unique position to share lessons learned and practical advice that can’t be Googled.</description>
    </item>
    
    <item>
      <title>How Security Evolves with your Kubernetes Footprint</title>
      <link>https://marcelmue.github.io/abstracts/kubesec-2020/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marcelmue.github.io/abstracts/kubesec-2020/</guid>
      <description>Single-cluster security in Kubernetes is a broadly covered topic with well-established best practices. Kubernetes adoption typically starts with a limited proof of concept in a single team, but can quickly find massive growth and decentralized adoption across an organization. This growth stage introduces security challenges as team practices diverge.
In this talk I will address how security requirements and solutions evolve with the scope of your kubernetes usage and how you can carry these already established best practices across your organization.</description>
    </item>
    
    <item>
      <title>How we clean up our murders - postmortems</title>
      <link>https://marcelmue.github.io/abstracts/software-circus-2020/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marcelmue.github.io/abstracts/software-circus-2020/</guid>
      <description>Many murders happen on a daily basis when Kubernetes clusters are treated like cattle. The sheer number of murder cases can quickly become overwhelming to resolve especially when simultaneously keeping the remainder of your herd healthy and happy in production. Fear no more: I will show you the techniques, structures and processes which we have adopted at Giant Swarm through thousands of postmortems. The best practices presented here will help you efficiently solve murders with the precision of a top tier medical examiner while also improving the health of the rest of your cattle.</description>
    </item>
    
    <item>
      <title>Kubernetes-Operator: Was ist das und wozu sind sie gut?</title>
      <link>https://marcelmue.github.io/abstracts/containerconf-online-2020/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marcelmue.github.io/abstracts/containerconf-online-2020/</guid>
      <description>Kubernetes lässt sich sehr einfach erweitern. Man definiert eine Custom Resource und verwendet das gleiche Controller Pattern, das Kubernetes selbst für das Management der Container benutzt. In der Community hat sich dafür der ursprünglich von CoreOS ins Leben gerufene Begriff des Kubernetes-Operator durchgesetzt. Kubernetes-Operatoren werden entwickelt, um weitere Arbeitsabläufe zu automatisieren sowie Anwendungen und Infrastrukturen in und um Kubernetes herum zu verwalten.
Dieser Vortrag stellt das Konzept und einige wichtige SDKs im Detail vor und zeigt auf, wann der Einsatz des Konzepts für Entwickler und Kubernetes-Nutzer sinnvoll sein kann.</description>
    </item>
    
    <item>
      <title>Our Road to Cluster API Adoption</title>
      <link>https://marcelmue.github.io/abstracts/destination-decentralization-2020/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marcelmue.github.io/abstracts/destination-decentralization-2020/</guid>
      <description>At Giant Swarm, we manage Kubernetes clusters for our customers. That’s a lot of Kubernetes clusters — a whole lot. From early on, we invested heavily in automation to be able to handle this large lot of clusters efficiently. Our weapons of choice are Kubernetes operators, which we develop and run in our environments. These operators enable us to manage clusters in a fault-tolerant and highly resilient way.
There is a catch though: by building our own operators, we have introduced our own declarative API for cluster lifecycle management.</description>
    </item>
    
    <item>
      <title>Testable Kubernetes Operators</title>
      <link>https://marcelmue.github.io/abstracts/devops-gathering-operators-2020/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marcelmue.github.io/abstracts/devops-gathering-operators-2020/</guid>
      <description>Kubernetes operators have been used more commonly throughout the Kubernetes community to automate workflows, manage applications and infrastructure. These usecases have produced complex operators which need to be tested properly to ensure that they are working as intended. Testing operators in practice has been a difficult task - unit tests can only cover a limited scope of logic (even with mocks like k8sfakeclient) and e2e tests (while offering a wider scope) are plagued by a common issue: flapping.</description>
    </item>
    
  </channel>
</rss>